{"version":3,"sources":["get-products.js","ProductGrid.js","get-sku.js","App.js","index.js"],"names":["token","productIds","a","fetch","method","headers","body","JSON","stringify","query","res","json","data","formatData","productData","site","products","edges","count","map","prod","currentProd","node","options","option","optionValues","values","value","label","id","entityId","in_stock","displayName","selected","key","name","url","path","addcart","addToCartUrl","image","defaultImage","price","prices","qty","adding","ProductGrid","updateBlock","updateQty","addCart","console","log","className","href","src","Math","round","toFixed","i","onChange","evt","target","disabled","type","onClick","sku","addedToCart","getSku","productId","optionsList","authToken","window","BCData","formSerialized","attributeData","reduce","attrString","attr","Promise","resolve","utils","api","productAttributes","optionChange","err","response","productAttr","stock","in_stock_attributes","without_tax","asyncMap","arr","fn","newArr","length","push","App","useState","productGrid","setProductGrid","updateOption","newProductGrid","product","newOptionList","updateAvailable","oldProductGrid","productBlock","newOption","newAttributeList","isInStock","undefined","indexOf","added","includes","line","useEffect","getProducts","then"],"mappings":"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","file":"static/js/main.d8e091dd.chunk.js","sourcesContent":["export async function getProducts(token, productIds) {\n  const res = await fetch('/graphql', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      query: `\n        query SingleProduct {\n          site {\n            products(entityIds: [${productIds}], first: 50) {\n              edges {\n                node {\n                  name\n                  entityId\n                  path\n                  addToCartUrl\n                  defaultImage {\n                      url (width: 200)\n                  }\n                  inventory {\n                    aggregated {\n                      availableToSell\n                    }\n                  }\n                  description\n                  warranty\n                  customFields {\n                    edges {\n                      node {\n                        name\n                        value\n                      }\n                    }\n                  }\n                  options (first: 50){\n                    edges{\n                        node{\n                            displayName\n                            entityId\n                            values (first: 50){\n                                edges{\n                                    node{\n                                        label\n                                        entityId\n                                    }\n                                }\n                            }\n                        }\n                    }\n                  }\n                  variants {\n                    edges {\n                      node {\n                        sku\n                        prices {\n                          price {\n                            value\n                          }\n                        }\n                        productOptions {\n                          edges {\n                            node {\n                              displayName\n                              __typename\n                              ... OptionFields\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                  prices {\n                    price {\n                      value\n                      currencyCode\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        fragment OptionFields on MultipleChoiceOption {\n          values {\n            edges {\n              node {\n                label\n                ... SwatchOptions\n              }\n            }\n          }\n        }\n      \n        fragment SwatchOptions on SwatchOptionValue {\n          hexColors\n          imageUrl (width: 200)\n        }\n      `\n    }),\n  });\n\n  const data = await res.json();\n  return formatData(data);\n}\n\nfunction formatData(data) {\n  const productData = data.data.site.products.edges;\n  let count = 0;\n  const prodList = productData.map((prod) => {\n    const currentProd = prod.node;\n    count ++;\n\n    const options = prod.node.options.edges.map((option) => {\n      const optionValues = option.node.values.edges.map((value) => {\n        return {\n          label: value.node.label,\n          id: value.node.entityId,\n          in_stock: true,\n        }\n      });\n      return {\n        label: option.node.displayName,\n        id: option.node.entityId,\n        selected: \"\",\n        values: optionValues,\n      }\n    });\n\n    return {\n      key: count,\n      name: currentProd.name,\n      id: currentProd.entityId,\n      url: currentProd.path,\n      addcart: currentProd.addToCartUrl,\n      image: currentProd.defaultImage.url,\n      price: currentProd.prices.price.value,\n      options: options,\n      qty: 1,\n      adding: false,\n    }\n  });\n  \n  return prodList;\n}\n","import React from 'react';\n\nfunction ProductGrid({data, updateBlock, updateQty, addCart}) {\n  console.log('product grid: ', data);\n  // let products = data.site.products.edges;\n  return (\n    <ul className=\"collection-grid\">\n      {data ? data.map((prod) => {\n        return (\n          <li key={prod.key}>\n            <div className=\"collection-img\">\n              <a href={prod.url}><img src={prod.image} /></a>\n            </div>\n            <div className=\"collection-details\">\n              <p><a href={prod.url}><strong>{prod.name}</strong></a></p>\n              <p>{(Math.round(prod.price * 100) / 100).toFixed(2)}</p>\n              {prod.options.map((option, i) => {\n                return (\n                  <div key={i}>\n                    <label>{option.label}</label>\n                    <select value={option.selected} onChange={(evt) => updateBlock(prod.key, prod.id, option.label, evt.target.value)}>\n                    <option key={i} value=\"\">-- Choose {option.label} --</option>\n                      {option.values.map((value, i) => {\n                        return (\n                          <option key={i} value={value.id} disabled={!value.in_stock}>\n                            {value.label} {value.in_stock ? '' : '(Out of stock)'}\n                          </option>\n                        );\n                      })}\n                    </select>\n                  </div>\n                );\n              })}\n              <input type=\"number\" value={prod.qty} onChange={(evt) => updateQty(prod.id, evt.target.value)}/>\n              <button className=\"button\" onClick={(evt) => addCart(prod.key, prod.sku, prod.qty)} disabled={prod.adding}>{prod.adding ? 'Adding To Cart' : 'Add To Cart'}</button>\n              {prod.addedToCart ?\n                  <span className=\"checkmark\">\n                    <div className=\"checkmark_circle\"></div>\n                    <div className=\"checkmark_stem\"></div>\n                    <div className=\"checkmark_kick\"></div>\n                  </span>\n              : ''}\n            </div>\n          </li>\n        )\n      }) : null}\n    </ul>\n  )\n}\n  \nexport default ProductGrid;","import utils from '@bigcommerce/stencil-utils';\n\nexport async function getSku(productId, optionsList) {\n  const authToken = window.BCData[\"csrf_token\"];\n  let formSerialized = `authenticity_token=${authToken}&action=add&product_id=${productId}`;\n\n  const attributeData = optionsList.reduce((attrString, attr) => {\n    return attrString + `&attribute[${attr.id}]=${attr.selected}`;\n  }, \"\");\n\n  formSerialized += attributeData + `&qty[]=1`;\n\n  return new Promise((resolve) => {\n    utils.api.productAttributes.optionChange(productId, formSerialized, [], (err, response) => {\n      console.log(response);\n      const productAttr = {\n        sku: response.data.sku,\n        stock: response.data.stock,\n        in_stock_attributes: response.data.in_stock_attributes,\n        price: response.data.price.without_tax.value,\n      };\n      resolve(productAttr);\n    });\n  });\n}\n","import React, { useEffect, useState } from 'react';\nimport { getProducts } from './get-products';\nimport ProductGrid from './ProductGrid';\nimport { getSku } from './get-sku';\n\n// const initialData = process.env.NODE_ENV === 'production' ? window.initialData : {\n//   token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJlYXQiOjE2MDYyNzI2MTUsInN1Yl90eXBlIjowLCJ0b2tlbl90eXBlIjoxLCJjb3JzIjpbImh0dHBzOi8vYmxpbmctdGVtcGxhdGUuc3Byb3V0Y29tbWVyY2UuY29tIl0sImNpZCI6MSwiaWF0IjoxNjA2MDk5ODE1LCJzdWIiOiJiY2FwcC5saW5rZXJkIiwic2lkIjo2MTQzMzIsImlzcyI6IkJDIn0.UxUK3B9I--xKZlVLAUTHTDf-lGnq0NWZAw8Ufp47luZjaIY6S1DjM4FTeBg081Zf_odco_FDN7WNEEtHpacJRg',\n//   productIds: [304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273],\n// };\n\n// if (process.env.NODE_ENV === 'development') {\n//   window.BCData = {\"csrf_token\":\"40f130665772a7fff56da4161145418cf53c40e15558abe094a67570ebeea08f\"};\n// };\n\n// const token = window.initialData.token;\n// const productIds = window.initialData.productIds;\n\nfunction App({token, productIds}) {\n  const [productGrid, setProductGrid] = useState(null);\n\n  useEffect(() => {\n    getProducts(token, productIds)\n      .then((data) =>{\n        setProductGrid(data);\n      });\n  }, []);\n\n  async function updateOption(key, label, value) {\n    const newProductGrid = productGrid.map((product) => {\n      if (product.key === key) {\n        // update the selected option\n        let newOptionList = product.options.map((option) => {\n          if (option.label === label) {\n            const newOption = {\n              ...option,\n              selected: value\n            };\n            return newOption;\n          }\n          return option;\n        });\n        return {\n          ...product,\n          options: newOptionList,\n        };\n      }\n      return product;\n    });\n\n    setProductGrid(newProductGrid);\n    return newProductGrid;\n  }\n\n  async function updateAvailable(key, productId, oldProductGrid) {\n    const newProductGrid = await asyncMap(oldProductGrid, async(productBlock) => {\n      const productAttributes = productBlock.key === key ? await getSku(productId, productBlock.options) : null;\n      \n      if (productAttributes) {\n        const newOption = productBlock.options.map((option) => {\n          const newAttributeList = option.values.map((value) => {\n            let isInStock = true;\n            if (productAttributes.in_stock_attributes !== undefined && productAttributes.in_stock_attributes.indexOf(value.id) < 0) {\n              isInStock = false;\n            }\n            const newAttribute = {\n              ...value,\n              in_stock: isInStock,\n            };\n            return newAttribute;\n          });\n          return {\n            ...option,\n            values: newAttributeList,\n          };\n        });\n        return {\n          ...productBlock,\n          options: newOption,\n          sku: productAttributes.sku,\n          stock: productAttributes.stock,\n          price: productAttributes.price,\n        };\n      } else {\n        return {\n          ...productBlock,\n        };\n      }\n    });\n    setProductGrid(newProductGrid);\n  }\n\n  async function updateBlock(key, productId, label, value) {\n    const newProductGrid = await updateOption(key, label, value);\n    updateAvailable(key, productId, newProductGrid);\n  }\n\n  async function addCart(key, sku, qty) {\n    if (sku) {\n      const newProductGrid = await asyncMap(productGrid, async(productBlock) => {\n        if (productBlock.key === key) {\n          return {\n            ...productBlock,\n            adding: true,\n          }\n        } else {\n          return {\n            ...productBlock,\n          }\n        }\n      });\n      setProductGrid(newProductGrid);\n\n      const res = await fetch(`/cart.php?action=add&sku=${sku}&qty=${qty}`);\n      const added = res.url.includes('cart.php');\n\n      setProductGrid((productGrid) => {\n        return productGrid.map((line) => {\n          if (line.sku === sku) {\n            return {\n              ...line,\n              addedToCart: added,\n              adding: false,\n            };\n          } \n          return {...line};\n        });\n      });\n    }\n  }\n\n  function updateQty(id, qty) {\n    const newProductGrid = productGrid.map((productBlock, i) => {\n      if (productBlock.id === id) {\n        return {\n          ...productBlock,\n          qty,\n        };\n      }\n      return productBlock;\n    });\n\n    setProductGrid(newProductGrid);\n  }\n\n  return (\n    <div className=\"App\">\n      <ProductGrid data={productGrid} updateBlock={updateBlock} updateQty={updateQty} addCart={addCart} />\n    </div>\n  );\n}\n\nasync function asyncMap(arr, fn) {\n  const newArr = [];\n  for (let i=0; i<arr.length; i++) {\n    newArr.push(await fn(arr[i]));\n  }\n  return newArr;\n}\n\nexport default App;\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './styles.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App {...window.initialData} />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\nexport default App;"],"sourceRoot":""}